import requests
import xml.etree.ElementTree as ET

BLOG_FEED_URL = 'https://chroniclesofaquietfighter.blogspot.com/feeds/posts/default?max-results=500'

def fetch_posts(feed_url):
    response = requests.get(feed_url)
    response.raise_for_status()
    root = ET.fromstring(response.content)
    ns = {'atom': 'http://www.w3.org/2005/Atom'}
    posts = []
    for entry in root.findall('atom:entry', ns):
        link = entry.find("atom:link[@rel='alternate']", ns)
        updated = entry.find('atom:updated', ns)
        if link is not None and 'href' in link.attrib:
            post_url = link.attrib['href']
            lastmod = updated.text if updated is not None else None
            posts.append((post_url, lastmod))
    return posts

def generate_sitemap_xml(posts):
    urlset = ET.Element('urlset', xmlns='http://www.sitemaps.org/schemas/sitemap/0.9')
    for url, lastmod in posts:
        url_elem = ET.SubElement(urlset, 'url')
        loc = ET.SubElement(url_elem, 'loc')
        loc.text = url
        if lastmod:
            lastmod_elem = ET.SubElement(url_elem, 'lastmod')
            lastmod_elem.text = lastmod
    indent_xml(urlset)
    return ET.tostring(urlset, encoding='unicode', method='xml')

def indent_xml(elem, level=0):
    i = "\n" + level*"  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        for e in elem:
            indent_xml(e, level+1)
        if not e.tail or not e.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i

if __name__ == '__main__':
    posts = fetch_posts(BLOG_FEED_URL)
    sitemap_xml = generate_sitemap_xml(posts)

    # Save for pasting into Blogger or hosting elsewhere
    with open('sitemap.xml', 'w', encoding='utf-8') as f:
        f.write(sitemap_xml)

    print("Sitemap generated with <lastmod>. Paste or host the sitemap.xml.")